import NavAdmin from '@/components/NavAdmin'
import MenuUsers from '@/components/MenuUsers';
import Head from 'next/head'
import Link from 'next/link'
import { useEffect, useState } from 'react';
import Axios from 'axios';
import { useRouter } from 'next/router';

export default function deleteEvent() {
  
  const API_URL = "http://localhost:8080/api/events/id/";

  const [evento, setEvent] = useState({
    description: "",
    comments: "",
    date: "",
    created_at: ""
  });

  const router = useRouter();
  const [pid] = useState(router.query.pid); // Obtenção do ID (pid) diretamente da URL

  const [message, setMessage] = useState({ message: "", status: "" });
  const [isDeleted, setIsDeleted] = useState(false); // Novo estado para controlar a deleção

  // Carregar os dados do evento
  useEffect(() => {
    if (!pid) return;  // Evitar requisição se o pid não estiver disponível

    const getEvent = async () => {
      try {
        const response = await Axios.get(API_URL + pid);
        setMessage({ message: "Evento carregado com sucesso! ", status: "ok" });
        setEvent(response.data); // Atualiza o estado com os dados do evento
      } catch (error) {
        console.error('Erro ao buscar o evento:', error);
        setMessage({ message: "Erro ao buscar o Evento! ", status: "error" });
      }
    };

    getEvent();

  }, [pid]);

  // Função para deletar o evento
  const handleDeleteEvent = async () => {
    if (isDeleted) return; // Evita chamada de deleção se o evento já foi deletado

    try {
      const response = await Axios.delete(API_URL + pid);
      setMessage({ message: "Evento deletado com sucesso! ", status: "ok" });
      setIsDeleted(true); // Marca o evento como deletado
    } catch (error) {
      console.error('Erro ao deletar o Evento:', error);
      setMessage({ message: "Erro ao deletar o Evento! ", status: "error" });
    }
  };

  const formatDateTime = (date) => {
    const dateObject = new Date(date); // Cria um objeto Date a partir do valor
  
    const year = dateObject.getFullYear();
    const month = String(dateObject.getMonth() + 1).padStart(2, '0'); // Meses começam do zero, então somamos 1
    const day = String(dateObject.getDate()).padStart(2, '0'); // Garantir que o dia tenha 2 dígitos
    const hours = String(dateObject.getHours()).padStart(2, '0'); // Garantir que as horas tenham 2 dígitos
    const minutes = String(dateObject.getMinutes()).padStart(2, '0'); // Garantir que os minutos tenham 2 dígitos
  
    return `${year}-${month}-${day}T${hours}:${minutes}`; // Formato esperado pelo datetime-local
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuUsers />
        {
          message.status === "" ? "" :
            message.status === "ok" ? 
              <div className='alert alert-success' role='alert'>
                {message.message}
                <Link className='alert-link' href='/admin/events'>Voltar</Link>
              </div> : 
              <div className='alert alert-danger' role='alert'>
                {message.message}
                <Link className='alert-link' href='/admin/events'>Voltar</Link>
              </div>
        }
      </div>

      <div className="d-flex justify-content-center p-2">
        <div className="container">
          <div className="row border-bottom">
            <h3> Deletar Evento </h3>
            
            <form>
                <div className="form-group">
                  <label className="form-label" htmlFor="description">Descrição</label>
                  <input type="text" id="description" name="description" className="form-control" value={evento.description} readOnly />
                </div>

                <div className="form-group">
                  <label className="form-label" htmlFor="comments">Comentário</label>
                  <input type="text" id="comments" name="comments" className="form-control" value={evento.comments} readOnly />
                </div>

                <div className="form-group">
                  <label className="form-label" htmlFor="date">Data</label>
                  <input type="datetime-local" id="date" name="date" className="form-control" value={formatDateTime(evento.date)} readOnly />
                </div>

                <div className="form-group">
                    <label className="form-label" htmlFor="created_at">Data de Criação</label>
                    <input type="text" id="created_at" name="created_at" className="form-control" value={evento.created_at} readOnly />
                </div>

              <div className="form-group p-2">
                <button 
                  className="btn btn-outline-danger" 
                  type="button" 
                  onClick={handleDeleteEvent} 
                  disabled={isDeleted} // Desabilita o botão após deleção
                >
                    Deletar
                </button>
                <Link className="btn btn-outline-info" href="/admin/events">Voltar</Link>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
}
